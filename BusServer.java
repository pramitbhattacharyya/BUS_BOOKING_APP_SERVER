/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package busserver;

/**
 *
 * @author PRAMIT
 */
 
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.*;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PRAMIT
 */
public class BusServer extends javax.swing.JFrame {
    
    static Socket s;
    static ServerSocket ss;
    static InputStreamReader isr;
    static BufferedReader br;
    static PrintWriter pw;
    static String message;
    static String values[];
    /**
     * Creates new form MyServerFrame
     */
//    java.awt.Frame parent, boolean modal
    public BusServer() {
//        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextArea1.setColumns(40);
        jTextArea1.setRows(10);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BusServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BusServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BusServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BusServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                MyServerFrame dialog = new MyServerFrame(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
                   new BusServer().setVisible(true);
            }
        });
        try{
            ss=new ServerSocket(7800);
//            System.out.println("Hello");
//            jTextArea1.setText("HI There");
            while(true)
            {
                s=ss.accept();
                isr=new InputStreamReader(s.getInputStream());
                br=new BufferedReader(isr);
                message=br.readLine();
                //////////////////////changed here
                if(message==null||message.equals("-1"))
                    continue;
                System.out.println(message);                
                if(jTextArea1.getText().toString().equals(""))
                    jTextArea1.setText("Android: "+ message);
                else
                   jTextArea1.setText(jTextArea1.getText().toString()+"\n"+ message);
               extractandCheck();               
            }
        }catch(IOException e)
        {
            e.printStackTrace();
        }
    }
    public static void extractandCheck()
    {
        values=message.split(";",0);        
            String connectionURL = "jdbc:mysql://localhost:3306/bus_booking_app";
            Connection connection = null;
            Statement statement = null;
             ResultSet rs = null;
             int updateQuery = 0;                          
             //Class.forName("com.mysql.jdbc.Driver"); 
//             System.out.println("Error404"); 
            try{
             connection = DriverManager.getConnection
                (connectionURL, "root", "");                
                statement = connection.createStatement();
                statement.executeUpdate("USE bus_booking_app;");  

                //make query and check if the values[0] is present in database. 
                rs = statement.executeQuery("Select PasswordHash from users where IDNo ="+values[0]+";");                
//                System.out.println(rs);                
//                Socket pp=null;
//                PrintWriter pw=null;
                  pw=new PrintWriter(s.getOutputStream());
//                try {
////                    pp=new Socket("10.6.6.80",7801);
//                    pw=new PrintWriter(s.getOutputStream());
////            pw.write(jTextField1.getText());
//            
//            // TODO add your handling code here:
//                } catch (IOException ex) {            
//                    ex.printStackTrace();
//        //            Logger.getLogger(MyServerFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
                if(!rs.next())
                {
                    System.out.println("rs is null");
                    rs = statement.executeQuery("select * from users where EmailId=\""+values[5]+"\";");  
                    if(rs.next())
                    {
                        System.out.println("Email already present");
                        pw.println(5);
                        pw.flush();
                        return;
                    }
                    //send back 0;                                        
//                    pw=new PrintWriter(s.getOutputStream());
//                    pw.write("0");
//                    pw.flush();
//                    pw.close();  
                                   
                    String rand=random();// generate random number.
                    System.out.println(rand);
//                    TimeUnit.SECONDS.sleep(1);
                    
                    pw.println(rand);
                    pw.flush();
//                    pw.close();                                     
                    System.out.println("ERROR");
                    //send email to values[values.length-2] and send rand;
                    JavaEmail mail=new JavaEmail();
                    String mailsend="Your OPT is "+rand+" . If u didn't want register for the "
                        + "app, then ignore this. ";
                    try {
                        mail.send(values[values.length-2],mailsend);
                    } catch (MessagingException ex) {
                        Logger.getLogger(TestServer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    String incoming="Panda";
                    try{
                        while(true)
                        {
                            incoming=br.readLine();
                            if(incoming==null||incoming.equals("-1"))
                                break;
                            System.out.println("Confirmation from app "+incoming);
                            //////////////////////changed here                            
                            break;
                        }
                        pw.println("2");
                        pw.flush();
                        pw.close();
                    }catch(IOException eio)
                    {
                        System.out.println(eio);
                    }
                    catch(Exception e)
                    {
                        System.out.println("Other error "+e);
                    }
                    if(incoming.equals("1"))// sent 1 after locally matched
                    {
                        String query=write(); 
                        updateQuery = statement.executeUpdate(query);
                        if (updateQuery != 0) {
                            System.out.println("table is created successfully and " + updateQuery + " row is inserted.");
                        }
                    }
                    else
                    {
                        System.out.println("Email Verification failed "+incoming);
                    }                       
                }
                else
                {
                    int passHash=rs.getInt("PasswordHash");
                    System.out.println(passHash);
                    if(passHash==Integer.parseInt(values[values.length-1]))
                    {   
                        System.out.println("Password Matched");                        
                        pw.println("1");
                        pw.flush();
                        pw.close();
                        System.out.println("Sent to client");                                                                   
                    }
                    else
                    {
                        System.out.println("Password Didn't Match");                        
                        pw.println("-1");
                        pw.flush();   
                        pw.close();
                        System.out.println("Sent to client");  
                        while(true)
                        {
                            s=ss.accept();
                            isr=new InputStreamReader(s.getInputStream());
                            br=new BufferedReader(isr);
                            message="";
                            message=br.readLine();
                            //////////////////////changed here
                            if(message==null||message.equals("-1"))
                                break;
                            System.out.println(message);                
                            if(jTextArea1.getText().toString().equals(""))
                                jTextArea1.setText("Android: "+ message);
                            else
                               jTextArea1.setText(jTextArea1.getText().toString()+"\n"+ message);
                            break;                            
                        }
                        if(message!=null&&message.equals("#send"))
                        {
                            JavaEmail changepass=new JavaEmail();
                            String OTP=random();
                            String OTPsend="Your OPT is "+OTP+" . If u didn't want register for the "
                        + "app, then ignore this. ";
                            try {
                                changepass.send(values[values.length-2],OTPsend);
                            } catch (Exception ex) {
                                Logger.getLogger(TestServer.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            System.out.println("OTP="+OTP);
                            pw=new PrintWriter(s.getOutputStream());
                            pw.println(OTP);
                            pw.flush();
                            pw.close();
                            while(true)
                            {
                                s=ss.accept();
                                isr=new InputStreamReader(s.getInputStream());
                                br=new BufferedReader(isr);
                                message="";
                                message=br.readLine();
                                //////////////////////changed here
                                if(message==""||message.equals("-1"))
                                    break;
                                System.out.println(message);                
                                if(jTextArea1.getText().toString().equals(""))
                                    jTextArea1.setText("Android: "+ message);
                                else
                                   jTextArea1.setText(jTextArea1.getText().toString()+"\n"+ message);
                                break;                            
                            }
                            pw=new PrintWriter(s.getOutputStream());                                                        
                            if(message!=null&&!message.equals("-1"))
                            {
                                System.out.println("update users set PasswordHash="+Integer.parseInt(message)+"where EmailId=\""+values[values.length-2]+"\";");
                                updateQuery = statement.executeUpdate("update users set PasswordHash="+Integer.parseInt(message)+" where EmailId=\""+values[values.length-2]+"\";");
                                
                                if (updateQuery != 0) {
                                System.out.println("table is update successfully and password of "+values[values.length-2]+" is changed.");
                                pw.println("1");
                               }
                                else
                                    pw.println("-1");
                                pw.flush(); 
                                pw.close();
                            }
                        }
                    }                    
                    br.close();
                    isr.close();
                    s.close();// 
                    System.out.println("Gone Back");
                }
//                try {
//                    if(pw!=null)                    
//                        pw.close();                    
////                    if(pp!=null)                        
////                        pp.close();
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
                // if present match values[values.length-1] with passhash of values[0]
                //      if(match) return 1
                //      else return -1
                // else return 0 and send email to the values[values.length-2]
                // if not,                        
                 // close all the connections.
                 rs.close();
//              statement.close();
//              connection.close();
            }catch(SQLException se){
                    //Handle errors for JDBC
                se.printStackTrace();
            }
            catch (Exception ex) {
              System.out.println("Unable to connect to database.");
              }
            finally{
//                try{
//                   if(rs!=null)
//                      rs.close();
//                }catch(SQLException se){
//                }
      //finally block used to close resources
                try{
                   if(statement!=null)
                      connection.close();
                }catch(SQLException se){
                }// do nothing
                try{
                   if(connection!=null)
                      connection.close();
                }catch(SQLException se){
                   se.printStackTrace();
                }//end finally try

          }
    }
    public static String random()
    {
        char ch[]={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r',
                    's','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9',
                   'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R',
                    'S','T','U','V','W','X','Y','Z'};
//        ,'!','~','@','#','$','%','^','&','*','-',
//                    '+','=','|',':',';','>','<','?','/'
        StringBuffer randbf=new StringBuffer("");
        for(int i=0;i<8;i++)
            randbf.append(ch[(int)(Math.random()*(ch.length))]);
        return(randbf.toString());        
    }
    public static String write()// append the file
    {        
        BufferedWriter output=null;
        String query="";
        StringBuffer sbr=new StringBuffer("");        
        try{                
            output=new BufferedWriter(new FileWriter(new File("abcd.txt"),true));
            sbr.append("INSERT INTO users VALUES (");        
            for(int i=0;i<values.length;i++){
                if(i==0||i==4||i==6)
                    sbr.append(Integer.parseInt(values[i])+((i!=6)?", ":");"));                        
                else
                    sbr.append("\""+values[i]+"\", ");
            }        
            query=sbr.toString();
            System.out.println(query);
            sbr.delete(0,sbr.length());
            output.write(query+"\n");
            System.out.println("Hi");   
            return query;            
        } 
        catch(IOException e)
        {
            System.out.println("The requested file is not found!");            
        }             
        catch(Exception err)
        {
            System.out.println("Error:"+ err);
        } 
        finally
        { 
           try{
              if(output!=null)
             output.close();
           }catch(Exception ex){
               System.out.println("Error in closing the BufferedWriter"+ex);
            }
        } 
        return "";      
    }
//    private javax.swing.JScrollPane jScrollPane1;
//    private static javax.swing.JTextArea jTextArea1;
    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}


