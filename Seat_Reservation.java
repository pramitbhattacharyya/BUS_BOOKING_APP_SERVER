/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package busserver;

/**
 *
 * @author PRAMIT
 */
 
import static busserver.Seat_Reservation.values;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PRAMIT
 */
public class Seat_Reservation extends javax.swing.JFrame {
    
    static Socket s;
    static ServerSocket ss;
    static InputStreamReader isr;
    static BufferedReader br;
    static PrintWriter pw;
    static String message,cont;
    static String values[];
    static java.util.Date entrydate;
    final static int beforeDate=5;
    /**
     * Creates new form MyServerFrame
     */
//    java.awt.Frame parent, boolean modal
    public Seat_Reservation() {
//        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextArea1.setColumns(40);
        jTextArea1.setRows(10);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BusServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BusServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BusServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BusServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                   new Seat_Reservation().setVisible(true);
            }
        });        
        try{
            entrydate=new java.util.Date();
            ss=new ServerSocket(7801);
//            System.out.println("Hello");
//            jTextArea1.setText("HI There");
            while(true){
                while(true)
                {
                    s=ss.accept();
                    isr=new InputStreamReader(s.getInputStream());
                    br=new BufferedReader(isr);
                    message=br.readLine();
                    if(message==null || message.equals("-1"))
                        break;
                    System.out.println(message);                
                    if(jTextArea1.getText().toString().equals(""))
                        jTextArea1.setText("Android: "+ message);
                    else
                       jTextArea1.setText(jTextArea1.getText().toString()+"\n"+ message);
                    fetchFare();
                    break;
                }
                if(message==null || message.equals("-1"))
                        continue;
//                pw=new PrintWriter(new OutputStreamWriter(s.getOutputStream()));
//                pw.println();
                while(true)
                {
                    s=ss.accept();
                    isr=new InputStreamReader(s.getInputStream());
                    br=new BufferedReader(isr);
                    message=br.readLine();
                    if(message==null||message.equals("-1"))
                        break;
                    System.out.println(message);                
                    if(jTextArea1.getText().toString().equals(""))
                        jTextArea1.setText("Android: "+ message);
                    else
                       jTextArea1.setText(jTextArea1.getText().toString()+"\n"+ message);
                    
                   extractandReturn(); 
                   break;
                }                
                System.out.println("Repeating again");
            }
        }catch(IOException e)
        {
            e.printStackTrace();
        }
    }
    public static void fetchFare()
    {        
            String connectionURL = "jdbc:mysql://localhost:3306/bus_booking_app";
            Connection connection = null;
            Statement statement = null;
             ResultSet rs = null;             
            try{
                values=message.split(";",0);
             connection = DriverManager.getConnection
                (connectionURL, "root", "");                
                statement = connection.createStatement();
                statement.executeUpdate("USE bus_booking_app;");  
                //make query in database and get how fare of a particular date and time. 
                System.out.println("select fare from fare where Date=\""+values[0]+"\" and Slot=\""+values[1]+"\";");
                rs = statement.executeQuery("select fare from fare where Date=\""+values[0]+"\" and Slot=\""+values[1]+"\";");                                
                pw=new PrintWriter(new OutputStreamWriter(s.getOutputStream()));                
                if(!rs.next())
                {
                    System.out.println("rs is null");
                    //send back -1;                                        
//                    pw=new PrintWriter(s.getOutputStream());
                    pw.println("-1");
                    pw.flush();
//                    pw.close();  
                }
                else{
                    int fare=rs.getInt("fare");
                    System.out.println(fare);
                    pw.println(String.valueOf(fare));  
//                    pw.println("HI THere");
                    pw.flush();              
                    System.out.println("Sent to client");
                }                    
                pw.close();
             // close all the connections.
             rs.close();
            }catch(SQLException se){
                    //Handle errors for JDBC
                    System.out.println("SQLException "+ se);
                se.printStackTrace();
            }
            catch(IOException eio)
            {
                System.out.println("IOEXception "+ eio);
                eio.printStackTrace();
            }
            catch (Exception ex) {
              System.out.println("Unable to connect to database."+ ex);
              ex.printStackTrace();
              }
            finally{                
      //finally block used to close resources
                try{
                   if(statement!=null)
                      connection.close();
                }catch(SQLException se){
                }// do nothing
                try{
                   if(connection!=null)
                      connection.close();
                }catch(SQLException se){
                   se.printStackTrace();
                }//end finally try

          }
    }  
    public static void extractandReturn()
    {
        values=message.split(";",0);        // recieves only date and slot from app
            String connectionURL = "jdbc:mysql://localhost:3306/bus_booking_app";
            Connection connection = null;
            Statement statement = null;
             ResultSet rs = null;
             int updateQuery = 0;                                       
            try{
             connection = DriverManager.getConnection
                (connectionURL, "root", "");                
                statement = connection.createStatement();
                statement.executeUpdate("USE bus_booking_app;");  

                //make query in database and get how many seats are reserved in the date and slot. 
                System.out.println("select Seat_No,IDNo from bus_seats where Date = \""+values[0]+"\" and slot = \""+values[1]+"\";");
                rs = statement.executeQuery("select Seat_No,IDNo from bus_seats where Date = \""+values[0]+"\" and slot = \""+values[1]+"\";");                                
                  pw=new PrintWriter(new OutputStreamWriter(s.getOutputStream()));                
                if(!rs.next())
                {
                    System.out.println("rs is null");
                    //send back -1;                                        
//                    pw=new PrintWriter(s.getOutputStream());
                    pw.println("-1");
                    pw.flush();
//                    pw.close();  
                }
                else{
                    StringBuffer sbr=new StringBuffer(""+rs.getInt("Seat_No")+";"+rs.getInt("IDNo")+";");
                    while(rs.next())                    
                        sbr.append(""+rs.getInt("Seat_No")+";"+rs.getInt("IDNo")+";");// returns to app Seat_No and IDNo of reserved seats
                    System.out.println(sbr.toString());
                    pw.println(sbr.toString());  
//                    pw.println("HI THere");
                    pw.flush();              
                    System.out.println("Sent to client");
                }
//                String in="HI";
//                while(true)
//                {
//                    in=br.readLine();
//                    System.out.println(in);
//                    break;
//                }
//                pw.println("2");
//                pw.flush();
                System.out.println("ERROR");                    
                String incoming="Panda";
                try{                    
                    while(true)
                    {
                        s=ss.accept();
                        isr=new InputStreamReader(s.getInputStream());
                        br=new BufferedReader(isr);
                        incoming=br.readLine();
                        if(incoming==null||incoming.equals("-1"))
                                break;
                        System.out.println("Booking from app "+incoming);                            
                        break;
                    }
                    if(incoming!=null && incoming.equals("-1"))
                    {   
                        pw.println("#EOF");
                        pw.flush();
                    }
                    else if(incoming!=null)
                    {   
                        pw.println("2");
                        pw.flush();
                    }
                    pw.close();
                    br.close();
                    if(incoming!=null && !incoming.equals("-1"))
                    {
                        values=incoming.split(";",0);
                        String Id=(values[0].split(",",0))[6];
                        System.out.println(Id);
                        String query=write(); 
                        values=query.split("\n",0);
                        for(int q=0;q<values.length;q++){                            
                            updateQuery = statement.executeUpdate(values[q]);
                            if (updateQuery != 0) {
                                System.out.println("table is created successfully and " + updateQuery + " row is inserted.");
                                rs=statement.executeQuery("select EmailId from users where IDNo="+Id+";"); 
                                Id=rs.next()?rs.getString("EmailId"):"user@gmail.com";
                                System.out.println(Id);
                                JavaEmail mail=new JavaEmail();
                                try {
                                    String sendconf="Your booked seat informations are: "+cont;
                                    mail.send(Id,sendconf);
                                    cont="";
                                    System.out.println("Seat Reservation email is sent");
                                } catch (Exception ex) {
                                    Logger.getLogger(TestServer.class.getName()).log(Level.SEVERE, null, ex);
                                }  
                                
                                // clearData()
                                if(entrydate.before(new java.util.Date()))
                                {
                                    entrydate=new java.util.Date();
                                    {
                                        rs=statement.executeQuery("Select Date,Slot from bus_seats;");
                                        while(rs.next())
                                        {                                        
                                            String delDate=rs.getString("Date");
                                            String delSlot=rs.getString("Slot");
    //                                         int delMon=Integer.parseInt(
    //                                                 delDate.substring(delDate.indexOf("-")+1,delDate.lastIndexOf("-")));
    //                                         if(delMon<=9)
    //                                             delDate=delDate.substring(0,delDate.indexOf("-"))+"-0"+delDate.substring(delDate.indexOf("-")+1);
                                            int delDay,delMon,delYear;                                        
                                            String delVal[]=delDate.split("-",0);
    //                                        delDay=Integer.parseInt(delVal[0]);
                                            delMon=Integer.parseInt(delVal[1]);
                                            delVal[1]=((delMon<=9)?"0":"")+delMon;
    //                                        delYear=Integer.parseInt(delVal[2]);
                                            String str= "" +delVal[2]+ "-" + delVal[1] + "-" + delVal[0] + " " + delSlot.substring(delSlot.indexOf("-")+2,delSlot.length());
                                            SimpleDateFormat dt = new SimpleDateFormat("yyyy-MM-dd hh:mm", Locale.ENGLISH);
                                            try {
                                                java.util.Date date = dt.parse(str);
                                                if(!(((new SimpleDateFormat("ss")).parse
                                                      (String.valueOf((new java.util.Date().getTime()-(beforeDate*3600000*24))/1000)))
                                                        .before(date)))
                                                    // give condition on the number of days of history u want to keep
                                                {
                                                    updateQuery = statement.executeUpdate("delete from bus_seats where Date=\""+delDate+"\" and Slot=\""+delSlot+"\"");
                                                    if (updateQuery != 0) {
                                                        System.out.println("Value is deleted from table bus_seats.");
                                                    }
                                                    rs=statement.executeQuery("Select Date,Slot from bus_seats;");
                                                }//                                                                        
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }                                        
                                        }

                                    }
                                    {
                                        rs=statement.executeQuery("Select Date,Slot from fare;");
                                        while(rs.next())
                                        {                                        
                                            String delDate=rs.getString("Date");
                                            String delSlot=rs.getString("Slot");
    //                                         int delMon=Integer.parseInt(
    //                                                 delDate.substring(delDate.indexOf("-")+1,delDate.lastIndexOf("-")));
    //                                         if(delMon<=9)
    //                                             delDate=delDate.substring(0,delDate.indexOf("-"))+"-0"+delDate.substring(delDate.indexOf("-")+1);
                                            int delDay,delMon,delYear;                                        
                                            String delVal[]=delDate.split("-",0);
    //                                        delDay=Integer.parseInt(delVal[0]);
                                            delMon=Integer.parseInt(delVal[1]);
                                            delVal[1]=((delMon<=9)?"0":"")+delMon;
    //                                        delYear=Integer.parseInt(delVal[2]);
                                            String str= "" +delVal[2]+ "-" + delVal[1] + "-" + delVal[0] + " " + delSlot.substring(delSlot.indexOf("-")+2,delSlot.length());
                                            SimpleDateFormat dt = new SimpleDateFormat("yyyy-MM-dd hh:mm", Locale.ENGLISH);
                                            try {
                                                java.util.Date date = dt.parse(str);
                                                if(!(new java.util.Date().before(date)))
                                                    // give condition on the number of days of history u want to keep
                                                {
                                                    updateQuery = statement.executeUpdate("delete from fare where Date=\""+delDate+"\" and Slot=\""+delSlot+"\"");
                                                    if (updateQuery != 0) {
                                                        System.out.println("Value is deleted from table fare.");
                                                    }
                                                    rs=statement.executeQuery("Select Date,Slot from fare;");
                                                }//                                                                        
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }                                        
                                        }
                                    }
                                }
                                ///
                            }
                        }                        
                    }
                    System.out.println("Gone Back");
                }catch(IOException eio)
                {
                    System.out.println(eio);
                }
                catch(Exception e)
                {
                    System.out.println("Other error "+e);
                }                                                                               
             // close all the connections.
             rs.close();
            }catch(SQLException se){
                    //Handle errors for JDBC
                    System.out.println("SQLException "+ se);
                se.printStackTrace();
            }
            catch(IOException eio)
            {
                System.out.println("IOEXception "+ eio);
                eio.printStackTrace();
            }
            catch (Exception ex) {
              System.out.println("Unable to connect to database."+ ex);
              ex.printStackTrace();
              }
            finally{                
      //finally block used to close resources
                try{
                   if(statement!=null)
                      connection.close();
                }catch(SQLException se){
                }// do nothing
                try{
                   if(connection!=null)
                      connection.close();
                }catch(SQLException se){
                   se.printStackTrace();
                }//end finally try

          }
    }           
    public static String write()// append the file
    {        
        BufferedWriter output=null;
        String query="";
        String []each;
        StringBuffer sbr=new StringBuffer("");  
        StringBuffer mailc=new StringBuffer("");
        try{                
            output=new BufferedWriter(new FileWriter(new File("pqrs.txt"),true));            
            for(int i=0;i<values.length;i++){
                each=values[i].split(",",0);
                sbr.append("INSERT INTO bus_seats VALUES (");        
                for(int j=0;j<each.length;j++){
                    if(j==2||j==3||j==6)
                        sbr.append(Integer.parseInt(each[j])+((j!=6)?", ":");"));                        
                    else
                        sbr.append("\""+each[j]+"\", ");
                    if(j<5)
                        mailc.append(each[j]+" ");
                }
                mailc.append("\n");
                sbr.append("\n");
            }                    
            cont=mailc.toString();            
            query=sbr.toString();
            mailc.delete(0, mailc.length());
            System.out.println(query);
            sbr.delete(0,sbr.length());
            output.write(query+"\n");
            System.out.println("Hi");             
            return query;            
        } 
        catch(IOException e)
        {
            System.out.println("The requested file is not found!");            
        }             
        catch(Exception err)
        {
            System.out.println("Error:"+ err);
        } 
        finally
        { 
           try{
              if(output!=null)
             output.close();
           }catch(Exception ex){
               System.out.println("Error in closing the BufferedWriter"+ex);
            }
        } 
        return "";      
    }
//    private javax.swing.JScrollPane jScrollPane1;
//    private static javax.swing.JTextArea jTextArea1;
    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}

//send email to values[values.length-2] and send rand;
//                    JavaEmail mail=new JavaEmail();
//                    try {
//                        mail.send(values[values.length-2],rand);
//                    } catch (MessagingException ex) {
//                        Logger.getLogger(TestServer.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                    String rand=random();// generate random number.
//                    System.out.println(rand);
//                    TimeUnit.SECONDS.sleep(1);                    
//                    pw.println(rand);
//                    pw.flush();
//                    pw.close();           
//    public static String random()
//    {
//        char ch[]={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r',
//                    's','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9',
//                   'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R',
//                    'S','T','U','V','W','X','Y','Z','!','~','@','#','$','%','^','&','*','-',
//                    '+','=','|',':',';','>','<','?','/'};
//        StringBuffer randbf=new StringBuffer("");
//        for(int i=0;i<8;i++)
//            randbf.append(ch[(int)(Math.random()*(ch.length))]);
//        return(randbf.toString());        
//    }
//}
//                else
//                {
//                    int passHash=rs.getInt("PasswordHash");
//                    System.out.println(passHash);
//                    if(passHash==Integer.parseInt(values[values.length-1]))
//                    {   
//                        System.out.println("Password Matched");                        
//                        pw.println("1");
//                        pw.flush();
//                        System.out.println("Sent to client");                                                                   
//                    }
//                    else
//                    {
//                        System.out.println("Password Didn't Match");                        
//                        pw.println("-1");
//                        pw.flush();
//                        pw.close();   //                        
//                    }
//                }
//if(incoming.equals("1"))// sent 1 after locally matched
//                {
//                    String query=write(); 
//                    updateQuery = statement.executeUpdate(query);
//                    if (updateQuery != 0) {
//                     System.out.println("table is created successfully and " + updateQuery + " row is inserted.");
//                    }
//                }
//                else
//                {
//                    System.out.println("Email Verification failed "+incoming);
//                } 